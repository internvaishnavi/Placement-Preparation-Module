class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> lst=new ArrayList<>();
        int n=matrix.length,m=matrix[0].length;
        // if(n==1){
        //     for(int i=0;i<m;i++){
        //         lst.add(matrix[0][i]);
        //     }
        // }
        // else if(m==1){
        //     for(int i=0;i<n;i++){
        //         lst.add(matrix[i][0]);
        //     }
        // }
        // else{
            int row_start=0;
        int row_end=n-1;
        int col_start=0;
        int col_end=m-1;
        while(row_start<=row_end && col_start<=col_end){
            for(int i=col_start;i<=col_end;i++){
                lst.add(matrix[row_start][i]);
            }
            row_start++;
            for(int i=row_start;i<=row_end;i++){
                lst.add(matrix[i][col_end]);
            }
            col_end--;
            for(int i=col_end;i>=col_start;i--){
                lst.add(matrix[row_end][i]);
            }
            row_end--;

            for(int i=row_end;i>=row_start;i--){
                lst.add(matrix[i][col_start]);
            }
            col_start++;
        }
        // }
        System.out.println(lst.size()+" "+m*n);
        if(lst.size()>m*n){
            while(lst.size()!=m*n){
                lst.remove(lst.size()-1);
            }
        }
        // if(col_start>col_end) lst.remove(lst.size()-1);
        return lst;
    }
}
